@namespace Contilog.Components
@using Contilog.Models
@using Microsoft.AspNetCore.Components.Forms

<div class="card post-card mb-3">
    <div class="card-body">
        @if (IsEditing)
        {
            <!-- Edit Mode -->
            <EditForm Model="EditModel" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label class="form-label">Content</label>
                    <BlazoredTextEditor @ref="textEditor"
                                        Placeholder="Enter your post content..."
                                        Theme="snow"
                                        DebugLevel="error">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-clean"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            @((MarkupString)(EditModel.Content ?? string.Empty))
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
                
                <div class="d-flex justify-content-between align-items-center">
                    <div class="text-muted small">
                        <div><strong>Author:</strong> @Post.Author</div>
                        <div><strong>Created:</strong> @Post.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")</div>
                    </div>
                    <div class="btn-group">
                        <button type="submit" class="btn btn-success btn-sm">
                            <span class="oi oi-check" aria-hidden="true"></span>
                            Save
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" @onclick="OnCancel">
                            <span class="oi oi-x" aria-hidden="true"></span>
                            Cancel
                        </button>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <!-- View Mode -->
            <div class="post-header d-flex justify-content-between align-items-start">
                <div class="post-content">
                    <div class="post-text">@((MarkupString)Post.Content)</div>
                </div>
                <div class="post-meta-top text-end text-muted">
                    <div class="post-edit-button mb-2">
                        <button class="btn btn-outline-primary" @onclick="OnEdit" title="Edit Post">
                            <span class="oi oi-pencil" aria-hidden="true"></span>
                        </button>
                    </div>
                    <div class="post-author">
                        <strong>@Post.Author</strong>
                    </div>
                    <div class="post-date">
                        <b>Created: </b>
                        @Post.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                    </div>
                    @if (!Post.ModifiedDate.Equals(Post.CreatedDate))
                    {
                        <div class="post-date">
                            <b>Last modified: </b>
                            @Post.ModifiedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Post Post { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public EventCallback<Post> OnEditRequested { get; set; }
    [Parameter] public EventCallback<Post> OnSaveRequested { get; set; }
    [Parameter] public EventCallback OnCancelRequested { get; set; }

    private Post EditModel { get; set; } = new();
    private BlazoredTextEditor? textEditor;

    protected override async Task OnParametersSetAsync()
    {
        if (IsEditing)
        {
            EditModel = new Post
            {
                Id = Post.Id,
                Content = Post.Content,
                Author = Post.Author,
                TopicId = Post.TopicId,
                CreatedDate = Post.CreatedDate
            };
        }
        await Task.CompletedTask;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Let the editor initialize naturally with the content in EditorContent
        await Task.CompletedTask;
    }

    private async Task OnEdit()
    {
        await OnEditRequested.InvokeAsync(Post);
    }

    private async Task OnSave()
    {
        if (textEditor != null)
        {
            EditModel.Content = await textEditor.GetHTML();
        }
        await OnSaveRequested.InvokeAsync(EditModel);
    }

    private async Task OnCancel()
    {
        await OnCancelRequested.InvokeAsync();
    }
}
