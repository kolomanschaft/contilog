@namespace Contilog.Components
@using Contilog.Models
@using Microsoft.AspNetCore.Components.Forms
@using Contilog.Handlers.Decisions
@inject IGetDecisionsByPostIdHandler GetDecisionsByPostIdHandler
@inject ICreateDecisionHandler CreateDecisionHandler
@inject IUpdateDecisionHandler UpdateDecisionHandler
@inject IDeleteDecisionHandler DeleteDecisionHandler

<div class="card post-card mb-3">
    <div class="card-body">
        @if (IsEditing)
        {
            <!-- Edit Mode -->
            <EditForm Model="EditModel" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label class="form-label">Content</label>
                    <BlazoredTextEditor @ref="textEditor"
                                        Placeholder="Enter your post content..."
                                        Theme="snow"
                                        DebugLevel="error">
                        <ToolbarContent>
                            <select class="ql-header">
                                <option selected=""></option>
                                <option value="1"></option>
                                <option value="2"></option>
                                <option value="3"></option>
                            </select>
                            <span class="ql-formats">
                                <button class="ql-bold"></button>
                                <button class="ql-italic"></button>
                                <button class="ql-underline"></button>
                                <button class="ql-strike"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-list" value="ordered"></button>
                                <button class="ql-list" value="bullet"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-link"></button>
                            </span>
                            <span class="ql-formats">
                                <button class="ql-clean"></button>
                            </span>
                        </ToolbarContent>
                        <EditorContent>
                            @((MarkupString)(EditModel.Content ?? string.Empty))
                        </EditorContent>
                    </BlazoredTextEditor>
                </div>
                
                <div class="d-flex justify-content-between align-items-center">
                    <Contilog.Components.InfoTooltip Author="@Post.Author" 
                                                     CreatedDate="@Post.CreatedDate" 
                                                     ModifiedDate="@Post.ModifiedDate" 
                                                     Color="primary" />
                    <div class="btn-group">
                        <button type="submit" class="btn btn-success btn-sm">
                            <span class="oi oi-check" aria-hidden="true"></span>
                            Save
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" @onclick="OnCancel">
                            <span class="oi oi-x" aria-hidden="true"></span>
                            Cancel
                        </button>
                        @if (Post.Id > 0)
                        {
                            <button type="button" class="btn btn-danger btn-sm" @onclick="ShowDeleteConfirmation">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                                Delete
                            </button>
                        }
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <!-- View Mode -->
            <div class="post-header d-flex justify-content-between align-items-start">
                <div class="post-content">
                    <div class="post-text">@((MarkupString)Post.Content)</div>
                    <div class="post-info mt-2">
                        <Contilog.Components.InfoTooltip Author="@Post.Author" 
                                                         CreatedDate="@Post.CreatedDate" 
                                                         ModifiedDate="@Post.ModifiedDate" 
                                                         Color="primary" />
                    </div>
                </div>
                <div class="post-meta-top text-end text-muted">
                    @if (CanEdit)
                    {
                        <div class="post-action-buttons mb-2">
                            <Contilog.Components.ActionButton Icon="oi-pencil" 
                                          Color="primary" 
                                          IsOutlined="true" 
                                          Title="Edit Post" 
                                          OnClick="OnEdit" />
                            <Contilog.Components.ActionButton Icon="oi-people" 
                                          Color="decision" 
                                          IsOutlined="true" 
                                          Title="Add Decision" 
                                          OnClick="AddNewDecision" />
                        </div>
                    }
                </div>
            </div>
        }
    </div>
    
    <!-- Decisions Section -->
    @if (!IsEditing && (decisions.Any() || isAddingNewDecision))
    {
        <div class="decisions-section mt-3">
            <div class="decisions-container">
                @foreach (var decision in decisions.OrderBy(d => d.CreatedDate))
                {
                    <DecisionCard Decision="decision" 
                                  IsEditing="editingDecisionId == decision.Id"
                                  CanEdit="CanEdit"
                                  OnEditRequested="HandleDecisionEditRequested"
                                  OnSaveRequested="HandleDecisionSaveRequested"
                                  OnCancelRequested="HandleDecisionCancelRequested"
                                  OnDeleteRequested="HandleDecisionDeleteRequested" />
                }
                
                @if (isAddingNewDecision)
                {
                    <DecisionCard Decision="newDecision" 
                                  IsEditing="true"
                                  OnEditRequested="HandleDecisionEditRequested"
                                  OnSaveRequested="HandleNewDecisionSaveRequested"
                                  OnCancelRequested="HandleNewDecisionCancelRequested" />
                }
            </div>
        </div>
    }
</div>

<ConfirmationDialog 
    IsVisible="showDeleteConfirmation"
    Title="Confirm Deletion"
    Message="Are you sure you want to delete this post? This action cannot be undone."
    ConfirmText="Delete"
    CancelText="Cancel"
    ConfirmButtonClass="btn-danger"
    OnConfirmed="ConfirmDelete"
    OnCancelled="HideDeleteConfirmation" />

@code {
    [Parameter] public Post Post { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public EventCallback<Post> OnEditRequested { get; set; }
    [Parameter] public EventCallback<Post> OnSaveRequested { get; set; }
    [Parameter] public EventCallback OnCancelRequested { get; set; }
    [Parameter] public EventCallback<Post> OnDeleteRequested { get; set; }

    private Post EditModel { get; set; } = new();
    private BlazoredTextEditor? textEditor;
    private bool showDeleteConfirmation = false;

    // Decision-related fields
    private List<Decision> decisions = new();
    private int editingDecisionId = 0;
    private bool isAddingNewDecision = false;
    private Decision newDecision = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsEditing)
        {
            EditModel = new Post
            {
                Id = Post.Id,
                Content = Post.Content,
                Author = Post.Author,
                TopicId = Post.TopicId,
                CreatedDate = Post.CreatedDate,
                ModifiedDate = Post.ModifiedDate
            };
        }

        // Load decisions for this post
        if (Post.Id > 0)
        {
            await LoadDecisions();
        }
        
        await Task.CompletedTask;
    }

    private async Task LoadDecisions()
    {
        var request = new GetDecisionsByPostIdRequest(Post.Id);
        var response = await GetDecisionsByPostIdHandler.Handle(request);
        decisions = response.Decisions.ToList();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // Let the editor initialize naturally with the content in EditorContent
        await Task.CompletedTask;
    }

    private async Task OnEdit()
    {
        await OnEditRequested.InvokeAsync(Post);
    }

    private async Task OnSave()
    {
        if (textEditor != null)
        {
            EditModel.Content = await textEditor.GetHTML();
        }
        await OnSaveRequested.InvokeAsync(EditModel);
    }

    private async Task OnCancel()
    {
        showDeleteConfirmation = false; // Hide modal if open
        await OnCancelRequested.InvokeAsync();
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        showDeleteConfirmation = false;
        await OnDeleteRequested.InvokeAsync(Post);
        StateHasChanged();
    }

    // Decision handling methods
    private void AddNewDecision()
    {
        newDecision = new Decision
        {
            PostId = Post.Id,
            Author = "Current User", // TODO: Get from authentication context
            CreatedDate = DateTime.Now
        };
        isAddingNewDecision = true;
        editingDecisionId = 0;
        StateHasChanged();
    }

    private async Task HandleDecisionEditRequested(Decision decision)
    {
        editingDecisionId = decision.Id;
        isAddingNewDecision = false;
        StateHasChanged();
    }

    private async Task HandleDecisionSaveRequested(Decision decision)
    {
        var request = new UpdateDecisionRequest(decision.Id, decision.Text);
        var response = await UpdateDecisionHandler.Handle(request);
        
        if (response.Success)
        {
            editingDecisionId = 0;
            await LoadDecisions();
        }
        StateHasChanged();
    }

    private async Task HandleDecisionCancelRequested()
    {
        editingDecisionId = 0;
        isAddingNewDecision = false;
        StateHasChanged();
    }

    private async Task HandleDecisionDeleteRequested(Decision decision)
    {
        var request = new DeleteDecisionRequest(decision.Id);
        var response = await DeleteDecisionHandler.Handle(request);
        
        if (response.Success)
        {
            await LoadDecisions();
        }
        StateHasChanged();
    }

    private async Task HandleNewDecisionSaveRequested(Decision decision)
    {
        var request = new CreateDecisionRequest(decision.Text, Post.Id, decision.Author);
        var response = await CreateDecisionHandler.Handle(request);
        
        if (response.Success)
        {
            isAddingNewDecision = false;
            await LoadDecisions();
        }
        StateHasChanged();
    }

    private async Task HandleNewDecisionCancelRequested()
    {
        isAddingNewDecision = false;
        StateHasChanged();
    }
}
