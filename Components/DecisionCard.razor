@namespace Contilog.Components
@using Contilog.Models
@using Contilog.Components
@using Microsoft.AspNetCore.Components.Forms

<div class="card decision-card mb-2">
    <div class="card-body p-3">
        @if (IsEditing)
        {
            <!-- Edit Mode -->
            <EditForm Model="EditModel" OnValidSubmit="OnSave">
                <DataAnnotationsValidator />
                <ValidationSummary />
                
                <div class="mb-3">
                    <label class="form-label">Decision Text</label>
                    <InputTextArea @bind-Value="EditModel.Text" 
                                   class="form-control" 
                                   rows="3" 
                                   placeholder="Enter decision text..." />
                </div>
                
                <div class="d-flex justify-content-between align-items-center">
                    <div class="btn-group">
                        <button type="submit" class="btn btn-success btn-sm">
                            <span class="oi oi-check" aria-hidden="true"></span>
                            Save
                        </button>
                        <button type="button" class="btn btn-secondary btn-sm" @onclick="OnCancel">
                            <span class="oi oi-x" aria-hidden="true"></span>
                            Cancel
                        </button>
                        @if (Decision.Id > 0)
                        {
                            <button type="button" class="btn btn-danger btn-sm" @onclick="ShowDeleteConfirmation">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                                Delete
                            </button>
                        }
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <!-- View Mode -->
            <div class="decision-header d-flex justify-content-between align-items-start">
                <div class="decision-content">
                    <div class="decision-text">@Decision.Text</div>
                    <GithubBadge Label="Author" 
                                 Message="@Decision.Author" 
                                 Color="info" />
                </div>
                <div class="decision-meta-top text-end text-muted">
                    @if (CanEdit)
                    {
                        <div class="decision-edit-button mb-2">
                            <ActionButton Icon="oi-pencil" 
                                          Color="primary" 
                                          IsOutlined="true" 
                                          Title="Edit Decision" 
                                          OnClick="OnEdit" />
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

<ConfirmationDialog 
    IsVisible="showDeleteConfirmation"
    Title="Confirm Deletion"
    Message="Are you sure you want to delete this decision? This action cannot be undone."
    ConfirmText="Delete"
    CancelText="Cancel"
    ConfirmButtonClass="btn-danger"
    OnConfirmed="ConfirmDelete"
    OnCancelled="HideDeleteConfirmation" />

@code {
    [Parameter] public Decision Decision { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public EventCallback<Decision> OnEditRequested { get; set; }
    [Parameter] public EventCallback<Decision> OnSaveRequested { get; set; }
    [Parameter] public EventCallback OnCancelRequested { get; set; }
    [Parameter] public EventCallback<Decision> OnDeleteRequested { get; set; }

    private Decision EditModel { get; set; } = new();
    private bool showDeleteConfirmation = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsEditing)
        {
            EditModel = new Decision
            {
                Id = Decision.Id,
                Text = Decision.Text,
                Author = Decision.Author,
                PostId = Decision.PostId,
                CreatedDate = Decision.CreatedDate,
                ModifiedDate = Decision.ModifiedDate
            };
        }
        await Task.CompletedTask;
    }

    private async Task OnEdit()
    {
        await OnEditRequested.InvokeAsync(Decision);
    }

    private async Task OnSave()
    {
        await OnSaveRequested.InvokeAsync(EditModel);
    }

    private async Task OnCancel()
    {
        showDeleteConfirmation = false; // Hide modal if open
        await OnCancelRequested.InvokeAsync();
    }

    private void ShowDeleteConfirmation()
    {
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        StateHasChanged();
    }

    private async Task ConfirmDelete()
    {
        showDeleteConfirmation = false;
        await OnDeleteRequested.InvokeAsync(Decision);
        StateHasChanged();
    }
}
