@namespace Contilog.Components
@using Contilog.Models
@using Contilog.Components
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Web

<div class="category-container">
    <div class="card topics-card">
        <div class="card-header topics-card-header">
            @if (IsEditing)
            {
                @* Category name editor *@
                <StringEditor 
                    IsVisible="true"
                    Placeholder="Enter category name..."
                    InitialValue="@Category.Name"
                    OnTextSubmitted="OnCategoryNameSubmitted"
                    OnCancelled="OnEditCancelled" />
            }
            else
            {
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title topics-card-title @(Category.IsActive ? "" : "text-muted") mb-0">
                        @Category.Name
                        @if (!Category.IsActive)
                        {
                            <span class="badge bg-secondary ms-2">Archived</span>
                        }
                    </h5>
                    @if (Category.IsActive)
                    {
                        <div class="d-flex gap-1">
                            <button class="btn btn-sm btn-primary" @onclick="OnEditRequested" title="Edit Category Name">
                                <span class="oi oi-pencil" aria-hidden="true"></span>
                            </button>
                            <button class="btn btn-sm btn-warning" @onclick="OnArchiveRequested" title="Archive Category">
                                <span class="oi oi-box" aria-hidden="true"></span>
                            </button>
                        </div>
                    }
                </div>
            }
        </div>
        <div class="card-body topics-card-body">
            <QuickGrid Items="@Topics" Class="table topics-table topics-grid">
                <TemplateColumn Title="Topics" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Title))">
                    <div class="@(context.IsActive ? "" : "text-muted")">
                        @context.Title
                        @if (!context.IsActive)
                        {
                            <span class="badge bg-secondary ms-2">Archived</span>
                        }
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Author" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Author))">
                    <div class="@(context.IsActive ? "" : "text-muted")">
                        @context.Author
                    </div>
                </TemplateColumn>
                <TemplateColumn Title="Posts" Sortable="true" SortBy="@(GridSort<Topic>.ByDescending(t => GetPostCount(t.Id)))">
                    <div class="@(context.IsActive ? "" : "text-muted") text-center">
                        @GetPostCount(context.Id)
                    </div>
                </TemplateColumn>
                <TemplateColumn>
                    <div class="topics-action-cell">
                        <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => OnViewPostsRequested.InvokeAsync(context.Id)" title="Write Posts">
                            <span class="oi @(context.IsActive ? "oi-pencil" : "oi-eye")" aria-hidden="true"></span>
                        </button>
                        @if (context.IsActive)
                        {
                            <button class="btn btn-sm btn-outline-warning" @onclick="() => OnTopicArchiveRequested.InvokeAsync(context.Id)" title="Archive Topic">
                                <span class="oi oi-box" aria-hidden="true"></span>
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-sm btn-outline-danger" @onclick="() => OnTopicDeleteRequested.InvokeAsync(context.Id)" title="Delete Topic">
                                <span class="oi oi-trash" aria-hidden="true"></span>
                            </button>
                        }
                    </div>
                </TemplateColumn>
            </QuickGrid>
            
            <StringEditor 
                IsVisible="IsAddingTopic"
                Placeholder="Enter topic title..."
                OnTextSubmitted="OnTopicTitleSubmitted"
                OnCancelled="OnAddTopicCancelled" />
            
            @if (Category.IsActive && !IsAddingTopic)
            {
                <div class="mt-1 mb-2 ps-2">
                    <button class="btn btn-outline-primary" @onclick="OnAddTopicRequested" title="Add Topic">
                        <span class="oi oi-plus" aria-hidden="true"></span>
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter] public Category Category { get; set; } = null!;
    [Parameter] public IQueryable<Topic> Topics { get; set; } = null!;
    [Parameter] public Dictionary<int, int> PostCounts { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool IsAddingTopic { get; set; }
    
    // Category events
    [Parameter] public EventCallback OnEditRequested { get; set; }
    [Parameter] public EventCallback OnEditCancelled { get; set; }
    [Parameter] public EventCallback<string> OnCategoryNameSubmitted { get; set; }
    [Parameter] public EventCallback OnArchiveRequested { get; set; }
    
    // Topic events
    [Parameter] public EventCallback OnAddTopicRequested { get; set; }
    [Parameter] public EventCallback OnAddTopicCancelled { get; set; }
    [Parameter] public EventCallback<string> OnTopicTitleSubmitted { get; set; }
    [Parameter] public EventCallback<int> OnViewPostsRequested { get; set; }
    [Parameter] public EventCallback<int> OnTopicArchiveRequested { get; set; }
    [Parameter] public EventCallback<int> OnTopicDeleteRequested { get; set; }

    private int GetPostCount(int topicId)
    {
        return PostCounts.TryGetValue(topicId, out var count) ? count : 0;
    }
}
