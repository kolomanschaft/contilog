@namespace Contilog.Components
@using Contilog.Models
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Web

<div class="category-container">
    <div class="card topics-card">
        <div class="card-header topics-card-header">
            @if (IsEditing)
            {
                @* Category name editor *@
                <StringEditor 
                    IsVisible="true"
                    Placeholder="Enter category name..."
                    InitialValue="@Category.Name"
                    OnTextSubmitted="OnCategoryNameSubmitted"
                    OnCancelled="OnEditCancelled" />
            }
            else
            {
                <div class="d-flex justify-content-between align-items-center">
                    <h5 class="card-title topics-card-title @(Category.IsActive ? "" : "text-muted") mb-0">
                        @Category.Name
                        @if (!Category.IsActive)
                        {
                            <span class="badge bg-secondary ms-2">Archived</span>
                        }
                    </h5>
                    @if (Category.IsActive)
                    {
                        <div class="d-flex gap-1">
                            <ActionButton Icon="oi-pencil" 
                                          Color="primary" 
                                          IsOutlined="false" 
                                          Title="Edit Category Name" 
                                          OnClick="OnEditRequested" />
                            <ActionButton Icon="oi-box" 
                                          Color="warning" 
                                          IsOutlined="false" 
                                          Title="Archive Category" 
                                          OnClick="OnArchiveRequested" />
                        </div>
                    }
                </div>
            }
        </div>
        @if (Category.Id > 0)
        {
            <div class="card-body topics-card-body">
                <QuickGrid Items="@Topics" Class="table topics-table topics-grid">
                    <TemplateColumn Title="Topics" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Title))">
                        <div class="@(context.IsActive ? "" : "text-muted")">
                            @context.Title
                            @if (!context.IsActive)
                            {
                                <span class="badge bg-secondary ms-2">Archived</span>
                            }
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Author" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Author))">
                        <div class="@(context.IsActive ? "" : "text-muted")">
                            @context.Author
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Posts" Sortable="true" SortBy="@(GridSort<Topic>.ByDescending(t => GetPostCount(t.Id)))">
                        <div class="@(context.IsActive ? "" : "text-muted") text-center">
                            @GetPostCount(context.Id)
                        </div>
                    </TemplateColumn>
                    <TemplateColumn>
                        <div class="topics-action-cell">
                            <ActionButton Icon="@(context.IsActive ? "oi-pencil" : "oi-eye")" 
                                          Color="primary" 
                                          IsOutlined="true" 
                                          Title="Write Posts" 
                                          OnClick="@(() => OnViewPostsRequested.InvokeAsync(context.Id))" />
                            @if (context.IsActive)
                            {
                                <ActionButton Icon="oi-box" 
                                              Color="warning" 
                                              IsOutlined="true" 
                                              Title="Archive Topic" 
                                              OnClick="@(() => OnTopicArchiveRequested.InvokeAsync(context.Id))" />
                            }
                            else
                            {
                                <ActionButton Icon="oi-trash" 
                                              Color="danger" 
                                              IsOutlined="true" 
                                              Title="Delete Topic" 
                                              OnClick="@(() => OnTopicDeleteRequested.InvokeAsync(context.Id))" />
                            }
                        </div>
                    </TemplateColumn>
                </QuickGrid>
                
                <StringEditor 
                    IsVisible="IsAddingTopic"
                    Placeholder="Enter topic title..."
                    OnTextSubmitted="OnTopicTitleSubmitted"
                    OnCancelled="OnAddTopicCancelled" />
                
                @if (Category.IsActive && !IsAddingTopic)
                {
                    <div class="mt-1 mb-2 ps-2">
                        <ActionButton Icon="oi-plus" 
                                      Color="primary" 
                                      IsOutlined="true" 
                                      Title="Add Topic" 
                                      OnClick="OnAddTopicRequested" />
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public Category Category { get; set; } = null!;
    [Parameter] public IQueryable<Topic> Topics { get; set; } = null!;
    [Parameter] public Dictionary<int, int> PostCounts { get; set; } = new();
    [Parameter] public bool IsEditing { get; set; }
    [Parameter] public bool IsAddingTopic { get; set; }
    
    // Category events
    [Parameter] public EventCallback OnEditRequested { get; set; }
    [Parameter] public EventCallback OnEditCancelled { get; set; }
    [Parameter] public EventCallback<string> OnCategoryNameSubmitted { get; set; }
    [Parameter] public EventCallback OnArchiveRequested { get; set; }
    
    // Topic events
    [Parameter] public EventCallback OnAddTopicRequested { get; set; }
    [Parameter] public EventCallback OnAddTopicCancelled { get; set; }
    [Parameter] public EventCallback<string> OnTopicTitleSubmitted { get; set; }
    [Parameter] public EventCallback<int> OnViewPostsRequested { get; set; }
    [Parameter] public EventCallback<int> OnTopicArchiveRequested { get; set; }
    [Parameter] public EventCallback<int> OnTopicDeleteRequested { get; set; }

    private int GetPostCount(int topicId)
    {
        return PostCounts.TryGetValue(topicId, out var count) ? count : 0;
    }
}
