@page "/topics"
@using Contilog.Models
@using System.Linq

<PageTitle>Topics</PageTitle>

<h1>Topics</h1>

@foreach (var category in categories)
{
    <div class="category-container">
        <div class="card topics-card">
            <div class="card-header topics-card-header">
                <h5 class="card-title topics-card-title">@category</h5>
            </div>
            <div class="card-body topics-card-body">
                <QuickGrid Items="@GetTopicsByCategory(category)" Class="table topics-table topics-grid">
                    <TemplateColumn Title="Topics" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Title))">
                        <div class="@(context.IsActive ? "" : "text-muted")">
                            @context.Title
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Author" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Author))">
                        <div class="@(context.IsActive ? "" : "text-muted")">
                            @context.Author
                        </div>
                    </TemplateColumn>
                    <TemplateColumn Title="Status">
                        <span class="badge @(context.IsActive ? "bg-success" : "bg-secondary")">
                            @(context.IsActive ? "Active" : "Closed")
                        </span>
                    </TemplateColumn>
                    <TemplateColumn Title="Actions">
                        <button class="btn btn-sm btn-primary me-1" @onclick="() => EditTopic(context.Id)" disabled="@(!context.IsActive)">
                            Edit
                        </button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTopic(context.Id)">
                            Delete
                        </button>
                    </TemplateColumn>
                </QuickGrid>
            </div>
        </div>
    </div>
}

@code {
    private IQueryable<Topic> topics = new List<Topic>
    {
        new Topic { Id = 1, Title = "Getting Started with Blazor", Category = "Web Development", Author = "John Doe", CreatedDate = DateTime.Now.AddDays(-30), IsActive = true },
        new Topic { Id = 2, Title = "ASP.NET Core Best Practices", Category = "Backend", Author = "Jane Smith", CreatedDate = DateTime.Now.AddDays(-15), IsActive = true },
        new Topic { Id = 3, Title = "Entity Framework Tips", Category = "Database", Author = "Mike Johnson", CreatedDate = DateTime.Now.AddDays(-7), IsActive = true },
        new Topic { Id = 4, Title = "CSS Grid Layout", Category = "Frontend", Author = "Sarah Wilson", CreatedDate = DateTime.Now.AddDays(-45), IsActive = false },
        new Topic { Id = 5, Title = "JavaScript ES6 Features", Category = "Frontend", Author = "Alex Brown", CreatedDate = DateTime.Now.AddDays(-22), IsActive = true },
        new Topic { Id = 6, Title = "Docker for Developers", Category = "DevOps", Author = "Chris Davis", CreatedDate = DateTime.Now.AddDays(-3), IsActive = true },
        new Topic { Id = 7, Title = "Testing Strategies", Category = "Quality Assurance", Author = "Emma Miller", CreatedDate = DateTime.Now.AddDays(-60), IsActive = false },
        new Topic { Id = 8, Title = "Performance Optimization", Category = "Backend", Author = "David Lee", CreatedDate = DateTime.Now.AddDays(-12), IsActive = true }
    }.AsQueryable();

    // Extract unique categories and sort them alphabetically
    private List<string> categories => topics
        .Select(t => t.Category)
        .Distinct()
        .OrderBy(c => c)
        .ToList();

    // Filter topics by category
    private IQueryable<Topic> GetTopicsByCategory(string category)
    {
        return topics
            .Where(t => t.Category == category)
            .OrderByDescending(t => t.IsActive)
            .ThenBy(t => t.ModifiedDate);
    }

    private void EditTopic(int topicId)
    {
        // TODO: Implement edit functionality
        Console.WriteLine($"Editing topic with ID: {topicId}");
    }

    private void DeleteTopic(int topicId)
    {
        // TODO: Implement delete functionality
        Console.WriteLine($"Deleting topic with ID: {topicId}");
    }
}

