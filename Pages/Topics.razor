@page "/topics"
@using Contilog.Models
@using Contilog.Handlers.Topics
@using Contilog.Handlers.Categories
@using Contilog.Handlers.Posts
@using System.Linq
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Web
@inject IGetAllTopicsHandler GetAllTopicsHandler
@inject ICreateTopicHandler CreateTopicHandler
@inject IArchiveTopicHandler ArchiveTopicHandler
@inject IDeleteTopicHandler DeleteTopicHandler
@inject IGetAllCategoriesHandler GetAllCategoriesHandler
@inject ICreateCategoryHandler CreateCategoryHandler
@inject IUpdateCategoryHandler UpdateCategoryHandler
@inject IArchiveCategoryHandler ArchiveCategoryHandler
@inject IGetPostCountByTopicIdHandler GetPostCountByTopicIdHandler
@inject NavigationManager Navigation

<PageTitle>Topics</PageTitle>

<div class="page-header">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Categories</h1>
        <div class="form-check form-switch">
            <input class="form-check-input" type="checkbox" role="switch" id="archiveToggle" 
                   @bind="showArchived">
            <label class="form-check-label" for="archiveToggle">
                Show archived
            </label>
        </div>
    </div>
</div>

@if (topics == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @if (categories == null || !categories.Any())
    {
        <div class="alert alert-info no-categories-info">
            <h5>No categories</h5>
            <p>Click the button to add a new category and add topics.</p>
        </div>
    }
    @foreach (var category in GetVisibleCategories())
    {
        <CategoryCard 
            Category="category"
            Topics="GetTopicsByCategory(category)"
            PostCounts="postCounts"
            IsEditing="(category.Id == -1 && addingNewCategory) || editingCategoryId == category.Id"
            IsAddingTopic="addingTopicToCategoryId == category.Id"
            OnEditRequested="() => StartEditingCategory(category.Id)"
            OnEditCancelled="() => CancelCategoryEdit(category.Id)"
            OnCategoryNameSubmitted="category.Id == -1 ? (Func<string, Task>)(name => OnNewCategoryNameSubmitted(name)) : (name => OnExistingCategoryNameSubmitted(name, category.Id))"
            OnArchiveRequested="() => ShowArchiveCategoryConfirmation(category.Id)"
            OnAddTopicRequested="() => StartAddingTopic(category.Id)"
            OnAddTopicCancelled="CancelNewTopic"
            OnTopicTitleSubmitted="(title) => OnTopicTitleSubmitted(title, category.Id)"
            OnViewPostsRequested="ViewPosts"
            OnTopicArchiveRequested="ShowArchiveConfirmation"
            OnTopicDeleteRequested="ShowDeleteConfirmation" />
    }
    <div class="d-flex justify-content-center mt-4 mb-4">
        <button class="btn btn-primary btn-lg" @onclick="StartAddingCategory">
            <span class="oi oi-plus" aria-hidden="true"></span>
            Add Category
        </button>
    </div>
}

<ConfirmationDialog 
    IsVisible="showArchiveConfirmation"
    Title="Confirm Topic Archive"
    Message="Are you sure you want to archive this topic? It will be hidden from the active view but can be restored later."
    ConfirmText="Archive"
    CancelText="Cancel"
    ConfirmButtonClass="btn-warning"
    OnConfirmed="ConfirmArchiveTopic"
    OnCancelled="HideArchiveConfirmation" />

<ConfirmationDialog 
    IsVisible="showDeleteConfirmation"
    Title="Confirm Topic Deletion"
    Message="Are you sure you want to delete this topic and all its posts? This action cannot be undone."
    ConfirmText="Delete"
    CancelText="Cancel"
    ConfirmButtonClass="btn-danger"
    OnConfirmed="ConfirmDeleteTopic"
    OnCancelled="HideDeleteConfirmation" />

<ConfirmationDialog 
    IsVisible="showArchiveCategoryConfirmation"
    Title="Confirm Category Archive"
    Message="Are you sure you want to archive this category and all its topics? They will be hidden from the active view but can be restored later."
    ConfirmText="Archive"
    CancelText="Cancel"
    ConfirmButtonClass="btn-warning"
    OnConfirmed="ConfirmArchiveCategory"
    OnCancelled="HideArchiveCategoryConfirmation" />

@code {
    private bool showArchived = false;
    private List<Topic>? topics = new();
    private List<Category>? categories = new();
    private Dictionary<int, int> postCounts = new();
    
    // Archive confirmation
    private bool showArchiveConfirmation = false;
    private int topicToArchiveId = 0;
    
    // Delete confirmation
    private bool showDeleteConfirmation = false;
    private int topicToDeleteId = 0;
    
    // Add new topic
    private int? addingTopicToCategoryId = null;
    
    // Edit category
    private int? editingCategoryId = null;
    
    // Add new category
    private bool addingNewCategory = false;
    
    // Archive category confirmation
    private bool showArchiveCategoryConfirmation = false;
    private int categoryToArchiveId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopics();
    }

    private async Task LoadTopics()
    {
        var getAllCategoriesRequest = new GetAllCategoriesRequest();
        var getAllCategoriesResponse = await GetAllCategoriesHandler.Handle(getAllCategoriesRequest);
        categories = getAllCategoriesResponse.Categories.ToList();
        
        var getAllTopicsRequest = new GetAllTopicsRequest();
        var getAllTopicsResponse = await GetAllTopicsHandler.Handle(getAllTopicsRequest);
        topics = getAllTopicsResponse.Topics.ToList();
        postCounts.Clear();
        foreach (var topic in topics)
        {
            var getPostCountRequest = new GetPostCountByTopicIdRequest(topic.Id);
            var getPostCountResponse = await GetPostCountByTopicIdHandler.Handle(getPostCountRequest);
            postCounts[topic.Id] = getPostCountResponse.Count;
        }

        StateHasChanged();
    }

    // Filter topics by category
    private IQueryable<Topic> GetTopicsByCategory(Category category)
    {
        if (topics == null) return new List<Topic>().AsQueryable();

        var filteredTopics = topics.Where(t => t.CategoryId == category.Id);
        
        if (!showArchived)
        {
            // Only show active topics when showArchived is false
            filteredTopics = filteredTopics.Where(t => t.IsActive);
        }
        // When showArchived is true, show both active and archived topics
        
        return filteredTopics
            .OrderByDescending(t => t.IsActive) // Active topics first
            .ThenBy(t => t.CreatedDate)
            .AsQueryable();
    }

    // Filter categories based on archive visibility
    private IEnumerable<Category> GetVisibleCategories()
    {
        if (categories == null) return new List<Category>();

        var filteredCategories = categories.AsEnumerable();
        
        if (!showArchived)
        {
            // Only show active categories when showArchived is false
            filteredCategories = categories.Where(c => c.IsActive);
        }
        // When showArchived is true, show both active and archived categories
        
        var result = filteredCategories.OrderBy(c => c.CreatedDate).ToList();
        
        // Add temporary new category if we're adding one
        if (addingNewCategory)
        {
            result.Add(new Category 
            { 
                Id = -1, // Temporary ID
                Name = "", 
                IsActive = true, 
                CreatedDate = DateTime.Now 
            });
        }
        
        return result;
    }

    private int GetPostCount(int topicId)
    {
        return postCounts.TryGetValue(topicId, out var count) ? count : 0;
    }

    private void ShowArchiveConfirmation(int topicId)
    {
        topicToArchiveId = topicId;
        showArchiveConfirmation = true;
        StateHasChanged();
    }

    private void HideArchiveConfirmation()
    {
        showArchiveConfirmation = false;
        topicToArchiveId = 0;
        StateHasChanged();
    }

    private async Task ConfirmArchiveTopic()
    {
        showArchiveConfirmation = false;
        if (topicToArchiveId > 0)
        {
            await ArchiveTopic(topicToArchiveId);
        }
        topicToArchiveId = 0;
        StateHasChanged();
    }

    private void ShowDeleteConfirmation(int topicId)
    {
        topicToDeleteId = topicId;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        topicToDeleteId = 0;
        StateHasChanged();
    }

    private async Task ConfirmDeleteTopic()
    {
        showDeleteConfirmation = false;
        if (topicToDeleteId > 0)
        {
            await DeleteTopic(topicToDeleteId);
        }
        topicToDeleteId = 0;
        StateHasChanged();
    }

    private async Task ArchiveTopic(int topicId)
    {
        var archiveTopicRequest = new ArchiveTopicRequest(topicId);
        var archiveTopicResponse = await ArchiveTopicHandler.Handle(archiveTopicRequest);
        if (archiveTopicResponse.Success)
        {
            await LoadTopics(); // Reload topics after archiving
        }
        else
        {
            // TODO: Show error message to user
            Console.WriteLine($"Failed to archive topic with ID: {topicId}");
        }
    }

    private async Task DeleteTopic(int topicId)
    {
        var deleteTopicRequest = new DeleteTopicRequest(topicId);
        var deleteTopicResponse = await DeleteTopicHandler.Handle(deleteTopicRequest);
        if (deleteTopicResponse.Success)
        {
            await LoadTopics(); // Reload topics after deletion
        }
        else
        {
            // TODO: Show error message to user
            Console.WriteLine($"Failed to delete topic with ID: {topicId}");
        }
    }

    private void ViewPosts(int topicId)
    {
        Navigation.NavigateTo($"/topics/{topicId}");
    }

    private void StartAddingTopic(int categoryId)
    {
        addingTopicToCategoryId = categoryId;
        StateHasChanged();
    }

    private void CancelNewTopic()
    {
        addingTopicToCategoryId = null;
        StateHasChanged();
    }

    private async Task OnTopicTitleSubmitted(string title, int categoryId)
    {
        if (!string.IsNullOrWhiteSpace(title))
        {
            var createTopicRequest = new CreateTopicRequest(
                title.Trim(),
                categoryId,
                "Kylo Ren" // TODO: Get from authentication
            );

            var createTopicResponse = await CreateTopicHandler.Handle(createTopicRequest);
            if (createTopicResponse.Success && createTopicResponse.Topic != null)
            {
                // Add to local list
                topics?.Add(createTopicResponse.Topic);
                
                // Initialize post count for new topic
                postCounts[createTopicResponse.Topic.Id] = 0;
                
                // Exit add mode
                addingTopicToCategoryId = null;
                StateHasChanged();
            }
            else
            {
                // TODO: Show error message to user
                Console.WriteLine("Failed to create new topic");
            }
        }
    }
    
    // Category editing methods
    private void StartEditingCategory(int categoryId)
    {
        editingCategoryId = categoryId;
        StateHasChanged();
    }

    private void CancelEditCategory()
    {
        editingCategoryId = null;
        StateHasChanged();
    }

    private void CancelCategoryEdit(int categoryId)
    {
        if (categoryId == -1)
        {
            // Cancel adding new category
            addingNewCategory = false;
        }
        else
        {
            // Cancel editing existing category
            editingCategoryId = null;
        }
        StateHasChanged();
    }

    private void StartAddingCategory()
    {
        addingNewCategory = true;
        StateHasChanged();
    }

    private async Task OnNewCategoryNameSubmitted(string name)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            // Create new category
            var createCategoryRequest = new CreateCategoryRequest(name.Trim());
            var createCategoryResponse = await CreateCategoryHandler.Handle(createCategoryRequest);
            
            if (createCategoryResponse.Success && createCategoryResponse.Category != null)
            {
                // Add to local list
                categories?.Add(createCategoryResponse.Category);
                
                // Exit add mode
                addingNewCategory = false;
                StateHasChanged();
            }
            else
            {
                // TODO: Show error message to user
                Console.WriteLine("Failed to create new category");
            }
        }
    }

    private async Task OnExistingCategoryNameSubmitted(string name, int categoryId)
    {
        if (!string.IsNullOrWhiteSpace(name))
        {
            // Update existing category
            var updateCategoryRequest = new UpdateCategoryRequest(categoryId, name.Trim());
            var updateCategoryResponse = await UpdateCategoryHandler.Handle(updateCategoryRequest);
            
            if (updateCategoryResponse.Success && updateCategoryResponse.Category != null)
            {
                // Update the local category list
                var category = categories?.FirstOrDefault(c => c.Id == categoryId);
                if (category != null)
                {
                    category.Name = updateCategoryResponse.Category.Name;
                }
                
                // Exit edit mode
                editingCategoryId = null;
                StateHasChanged();
            }
            else
            {
                // TODO: Show error message to user
                Console.WriteLine("Failed to update category name");
            }
        }
    }
    
    // Category archive methods
    private void ShowArchiveCategoryConfirmation(int categoryId)
    {
        categoryToArchiveId = categoryId;
        showArchiveCategoryConfirmation = true;
        StateHasChanged();
    }

    private void HideArchiveCategoryConfirmation()
    {
        showArchiveCategoryConfirmation = false;
        categoryToArchiveId = 0;
        StateHasChanged();
    }

    private async Task ConfirmArchiveCategory()
    {
        showArchiveCategoryConfirmation = false;
        if (categoryToArchiveId > 0)
        {
            await ArchiveCategory(categoryToArchiveId);
        }
        categoryToArchiveId = 0;
        StateHasChanged();
    }

    private async Task ArchiveCategory(int categoryId)
    {
        var archiveCategoryRequest = new ArchiveCategoryRequest(categoryId);
        var archiveCategoryResponse = await ArchiveCategoryHandler.Handle(archiveCategoryRequest);
        if (archiveCategoryResponse.Success)
        {
            await LoadTopics(); // Reload categories and topics after archiving
        }
        else
        {
            // TODO: Show error message to user
            Console.WriteLine($"Failed to archive category with ID: {categoryId}");
        }
    }
}

