@page "/topics"
@using Contilog.Models
@using Contilog.Repositories
@using System.Linq
@using Microsoft.AspNetCore.Components.QuickGrid
@inject ITopicRepository TopicRepository
@inject IPostRepository PostRepository
@inject ICategoryRepository CategoryRepository
@inject NavigationManager Navigation

<PageTitle>Topics</PageTitle>

<div class="topics-header">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>Topics</h1>
        <button class="btn btn-outline-secondary" @onclick="ToggleArchiveVisibility">
            <span class="oi @(showArchived ? "oi-eye-closed" : "oi-eye")" aria-hidden="true"></span>
            @(showArchived ? "Hide archived" : "Show archived")
        </button>
    </div>
</div>

@if (topics == null)
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else
{
    @foreach (var category in GetVisibleCategories())
    {
        <div class="category-container">
            <div class="card topics-card">
                <div class="card-header topics-card-header">
                    <h5 class="card-title topics-card-title @(category.IsActive ? "" : "text-muted")">
                        @category.Name
                        @if (!category.IsActive)
                        {
                            <span class="badge bg-secondary ms-2">Archived</span>
                        }
                    </h5>
                </div>
                <div class="card-body topics-card-body">
                    <QuickGrid Items="@GetTopicsByCategory(category)" Class="table topics-table topics-grid">
                        <TemplateColumn Title="Topics" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Title))">
                            <div class="@(context.IsActive ? "" : "text-muted")">
                                @context.Title
                                @if (!context.IsActive)
                                {
                                    <span class="badge bg-secondary ms-2">Archived</span>
                                }
                            </div>
                        </TemplateColumn>
                        <TemplateColumn Title="Author" Sortable="true" SortBy="@(GridSort<Topic>.ByAscending(t => t.Author))">
                            <div class="@(context.IsActive ? "" : "text-muted")">
                                @context.Author
                            </div>
                        </TemplateColumn>
                        <TemplateColumn Title="Posts" Sortable="true" SortBy="@(GridSort<Topic>.ByDescending(t => GetPostCount(t.Id)))">
                            <div class="@(context.IsActive ? "" : "text-muted") text-center">
                                @GetPostCount(context.Id)
                            </div>
                        </TemplateColumn>
                        <TemplateColumn>
                            <div class="topics-action-cell">
                                <button class="btn btn-sm btn-outline-primary me-1" @onclick="() => ViewPosts(context.Id)" title="View Posts">
                                    <span class="oi oi-eye" aria-hidden="true"></span>
                                </button>
                                <button class="btn btn-sm btn-outline-danger" @onclick="() => ShowDeleteConfirmation(context.Id)" title="Delete Topic">
                                    <span class="oi oi-trash" aria-hidden="true"></span>
                                </button>
                            </div>
                        </TemplateColumn>
                    </QuickGrid>
                </div>
            </div>
        </div>
    }
}

<ConfirmationDialog 
    IsVisible="showDeleteConfirmation"
    Title="Confirm Topic Deletion"
    Message="Are you sure you want to delete this topic and all its posts? This action cannot be undone."
    ConfirmText="Delete"
    CancelText="Cancel"
    ConfirmButtonClass="btn-danger"
    OnConfirmed="ConfirmDeleteTopic"
    OnCancelled="HideDeleteConfirmation" />

@code {
    private bool showArchived = false;
    private List<Topic>? topics = new();
    private List<Category>? categories = new();
    private Dictionary<int, int> postCounts = new();
    
    // Delete confirmation
    private bool showDeleteConfirmation = false;
    private int topicToDeleteId = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicsAsync();
    }

    private async Task LoadTopicsAsync()
    {
        categories = (await CategoryRepository.GetAllCategoriesAsync()).ToList();
        topics = (await TopicRepository.GetAllTopicsAsync()).ToList();
        postCounts.Clear();
        foreach (var topic in topics)
        {
            var count = await PostRepository.GetPostCountByTopicIdAsync(topic.Id);
            postCounts[topic.Id] = count;
        }

        StateHasChanged();
    }

    // Filter topics by category
    private IQueryable<Topic> GetTopicsByCategory(Category category)
    {
        if (topics == null) return new List<Topic>().AsQueryable();

        var filteredTopics = topics.Where(t => t.CategoryId == category.Id);
        
        if (!showArchived)
        {
            // Only show active topics when showArchived is false
            filteredTopics = filteredTopics.Where(t => t.IsActive);
        }
        // When showArchived is true, show both active and archived topics
        
        return filteredTopics
            .OrderByDescending(t => t.IsActive) // Active topics first
            .ThenByDescending(t => t.CreatedDate)
            .AsQueryable();
    }

    // Filter categories based on archive visibility
    private IEnumerable<Category> GetVisibleCategories()
    {
        if (categories == null) return new List<Category>();

        var filteredCategories = categories.AsEnumerable();
        
        if (!showArchived)
        {
            // Only show active categories when showArchived is false
            filteredCategories = categories.Where(c => c.IsActive);
        }
        // When showArchived is true, show both active and archived categories
        return filteredCategories.OrderBy(c => c.Name);
    }

    private int GetPostCount(int topicId)
    {
        return postCounts.TryGetValue(topicId, out var count) ? count : 0;
    }

    private void ShowDeleteConfirmation(int topicId)
    {
        topicToDeleteId = topicId;
        showDeleteConfirmation = true;
        StateHasChanged();
    }

    private void HideDeleteConfirmation()
    {
        showDeleteConfirmation = false;
        topicToDeleteId = 0;
        StateHasChanged();
    }

    private async Task ConfirmDeleteTopic()
    {
        showDeleteConfirmation = false;
        if (topicToDeleteId > 0)
        {
            await DeleteTopic(topicToDeleteId);
        }
        topicToDeleteId = 0;
        StateHasChanged();
    }

    private async Task DeleteTopic(int topicId)
    {
        var success = await TopicRepository.DeleteTopicAsync(topicId);
        if (success)
        {
            await LoadTopicsAsync(); // Reload topics after deletion
        }
        else
        {
            // TODO: Show error message to user
            Console.WriteLine($"Failed to delete topic with ID: {topicId}");
        }
    }

    private void ViewPosts(int topicId)
    {
        Navigation.NavigateTo($"/topics/{topicId}");
    }

    private void ToggleArchiveVisibility()
    {
        showArchived = !showArchived;
        StateHasChanged();
    }
}

