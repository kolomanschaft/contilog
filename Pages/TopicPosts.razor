@page "/topics/{topicId:int}"
@using Contilog.Models
@using Contilog.Repositories
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms
@inject ITopicRepository TopicRepository
@inject ICategoryRepository CategoryRepository
@inject IPostRepository PostRepository

<PageTitle>@topicTitle</PageTitle>

@if (topic == null)
{
    <div class="alert alert-warning">
        <h4>Topic Not Found</h4>
        <p>The requested topic could not be found.</p>
        <a href="/topics" class="btn btn-primary">Return to Topics</a>
    </div>
}
else
{
    <div class="topic-info mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">@topic.Title</h4>
                <a href="/topics" class="btn btn-primary btn-sm">
                    <span class="oi oi-arrow-left" aria-hidden="true"></span>
                    Back to Topics
                </a>
            </div>
            <div class="card-body">
                <div class="row small">
                    <div class="col-md-4">
                        <strong>Category:</strong> @categoryName
                    </div>
                </div>
                <div class="row small mt-2">
                    <div class="col-md-4">
                        <strong>Status:</strong> 
                        <StatusBadge IsActive="topic.IsActive" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="posts-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Posts (@posts.Count())</h3>
        </div>

        @if (!posts.Any() && topic.IsActive)
        {
            <div class="alert alert-info">
                <h5>No posts yet</h5>
                <p>Be the first to start the conversation!</p>
            </div>
        }
        else
        {
            <div class="posts-container">
                @foreach (var post in posts.OrderBy(p => p.CreatedDate))
                {
                    <div class="card post-card mb-3">
                        <div class="card-body">
                            @if (editingPostId == post.Id)
                            {
                                <!-- Edit Mode -->
                                <EditForm Model="editingPost" OnValidSubmit="SavePost">
                                    <DataAnnotationsValidator />
                                    <ValidationSummary />
                                    
                                    <div class="mb-3">
                                        <label for="post-title" class="form-label">Title</label>
                                        <InputText id="post-title" class="form-control" @bind-Value="editingPost.Title" />
                                    </div>
                                    
                                    <div class="mb-3">
                                        <label for="post-content" class="form-label">Content</label>
                                        <InputTextArea id="post-content" class="form-control post-editor" rows="8" @bind-Value="editingPost.Content" />
                                    </div>
                                    
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="text-muted small">
                                            <div><strong>Author:</strong> @post.Author</div>
                                            <div><strong>Created:</strong> @post.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")</div>
                                        </div>
                                        <div class="btn-group">
                                            <button type="submit" class="btn btn-success btn-sm">
                                                <span class="oi oi-check" aria-hidden="true"></span>
                                                Save
                                            </button>
                                            <button type="button" class="btn btn-secondary btn-sm" @onclick="CancelEdit">
                                                <span class="oi oi-x" aria-hidden="true"></span>
                                                Cancel
                                            </button>
                                        </div>
                                    </div>
                                </EditForm>
                            }
                            else
                            {
                                <!-- View Mode -->
                                <div class="post-header d-flex justify-content-between align-items-start">
                                    <div class="post-content">
                                        <h6 class="post-title">@post.Title</h6>
                                        <p class="post-text">@post.Content</p>
                                    </div>
                                    <div class="post-meta-top text-end text-muted">
                                        <div class="post-edit-button mb-2">
                                            <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPost(post.Id)" title="Edit Post">
                                                <span class="oi oi-pencil" aria-hidden="true"></span>
                                            </button>
                                        </div>
                                        <div class="post-author">
                                            <strong>@post.Author</strong>
                                        </div>
                                        <div class="post-date">
                                            @post.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        }

        @if (topic.IsActive)
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-primary" @onclick="AddNewPost">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    Add Post
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public int TopicId { get; set; }

    private Topic? topic;
    private string topicTitle = "Topic Details";
    private Category? category;
    private String categoryName = string.Empty;
    private List<Post> posts = new();
    
    // Edit mode properties
    private int? editingPostId = null;
    private Post editingPost = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTopicDataAsync();
    }

    private async Task LoadTopicDataAsync()
    {
        topic = await TopicRepository.GetTopicByIdAsync(TopicId);
        if (topic != null)
        {
            topicTitle = topic.Title;
            var topicPosts = await PostRepository.GetPostsByTopicIdAsync(TopicId);
            posts = topicPosts.ToList();
            category = await CategoryRepository.GetCategoryByIdAsync(topic.CategoryId);
            if (category != null)
            {
                categoryName = category.Name;
            }
            else
            {
                categoryName = "Category Not Found";
            }
        }
        else
        {
            topicTitle = "Topic Not Found";
            posts = new List<Post>();
        }

        StateHasChanged();
    }

    private void AddNewPost()
    {
        // TODO: Implement add new post functionality
        Console.WriteLine("Add new post clicked");
    }

    private void EditPost(int postId)
    {
        var post = posts.FirstOrDefault(p => p.Id == postId);
        if (post != null)
        {
            editingPostId = postId;
            editingPost = new Post 
            { 
                Id = post.Id,
                Title = post.Title, 
                Content = post.Content, 
                Author = post.Author,
                TopicId = post.TopicId,
                CreatedDate = post.CreatedDate
            };
            StateHasChanged();
        }
    }
    
    private async Task SavePost()
    {
        if (editingPostId.HasValue && editingPost != null)
        {
            // Update the post in the repository
            var success = await PostRepository.UpdatePostAsync(editingPost);
            if (success)
            {
                // Update the local list
                var postIndex = posts.FindIndex(p => p.Id == editingPostId.Value);
                if (postIndex >= 0)
                {
                    posts[postIndex] = editingPost;
                }
                
                // Exit edit mode
                editingPostId = null;
                editingPost = new();
                StateHasChanged();
            }
            else
            {
                // TODO: Show error message to user
                Console.WriteLine($"Failed to update post with ID: {editingPostId}");
            }
        }
    }
    
    private void CancelEdit()
    {
        editingPostId = null;
        editingPost = new();
        StateHasChanged();
    }
}
