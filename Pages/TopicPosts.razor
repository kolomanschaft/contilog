@page "/topics/{topicId:int}"
@using Contilog.Models
@using Contilog.Repositories
@using System.Linq
@using Microsoft.AspNetCore.Components.Forms
@inject ITopicRepository TopicRepository
@inject ICategoryRepository CategoryRepository
@inject IPostRepository PostRepository

<PageTitle>@topicTitle</PageTitle>

@if (topic == null)
{
    <div class="alert alert-warning">
        <h4>Topic Not Found</h4>
        <p>The requested topic could not be found.</p>
        <a href="/topics" class="btn btn-primary">Return to Topics</a>
    </div>
}
else
{
    <div class="topic-info mb-4">
        <div class="card">
            <div class="card-header d-flex justify-content-between align-items-center">
                <h4 class="card-title mb-0">@topic.Title</h4>
                <a href="/topics" class="btn btn-primary">
                    <span class="oi oi-arrow-left" aria-hidden="true"></span>
                    Back to Topics
                </a>
            </div>
            <div class="card-body">
                <div class="row small">
                    <div class="col-md-4">
                        <strong>Category:</strong> @categoryName
                    </div>
            </div>
                <div class="row small mt-2">
                    <div class="col-md-4">
                        <strong>Status:</strong> 
                        <StatusBadge IsActive="topic.IsActive" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="posts-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Posts (@posts.Count())</h3>
        </div>

        @if (!posts.Any() && topic.IsActive)
        {
            <div class="alert alert-info">
                <h5>No posts yet</h5>
                <p>Be the first to start the conversation!</p>
            </div>
        }
        else
        {
            <div class="posts-container">
                @foreach (var post in posts.OrderBy(p => p.CreatedDate))
                {
                    <PostCard Post="post" 
                              IsEditing="editingPostId == post.Id"
                              OnEditRequested="HandleEditRequested"
                              OnSaveRequested="HandleSaveRequested"
                              OnCancelRequested="HandleCancelRequested" />
                }
            </div>
        }

        @if (topic.IsActive)
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-primary btn-lg" @onclick="AddNewPost">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    Add Post
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public int TopicId { get; set; }

    private Topic? topic;
    private string topicTitle = "Topic Details";
    private Category? category;
    private String categoryName = string.Empty;
    private List<Post> posts = new();
    
    // Edit mode properties
    private int? editingPostId = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTopicDataAsync();
    }

    private async Task LoadTopicDataAsync()
    {
        topic = await TopicRepository.GetTopicByIdAsync(TopicId);
        if (topic != null)
        {
            topicTitle = topic.Title;
            var topicPosts = await PostRepository.GetPostsByTopicIdAsync(TopicId);
            posts = topicPosts.ToList();
            category = await CategoryRepository.GetCategoryByIdAsync(topic.CategoryId);
            if (category != null)
            {
                categoryName = category.Name;
            }
            else
            {
                categoryName = "Category Not Found";
            }
        }
        else
        {
            topicTitle = "Topic Not Found";
            posts = new List<Post>();
        }

        StateHasChanged();
    }

    private void AddNewPost()
    {
        // TODO: Implement add new post functionality
        Console.WriteLine("Add new post clicked");
    }

    private Task HandleEditRequested(Post post)
    {
        editingPostId = post.Id;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private async Task HandleSaveRequested(Post editedPost)
    {
        if (editingPostId.HasValue)
        {
            // Update the post in the repository
            var  updatedPost = await PostRepository.UpdatePostAsync(editedPost);
            if (updatedPost != null)
            {
                // Update the local list
                var postIndex = posts.FindIndex(p => p.Id == editingPostId.Value);
                if (postIndex >= 0)
                {
                    posts[postIndex] = updatedPost;
                }
                
                // Exit edit mode
                editingPostId = null;
                StateHasChanged();
            }
            else
            {
                // TODO: Show error message to user
                Console.WriteLine($"Failed to update post with ID: {editingPostId}");
            }
        }
    }
    
    private Task HandleCancelRequested()
    {
        editingPostId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }
}
