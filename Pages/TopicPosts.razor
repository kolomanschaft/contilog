@page "/topics/{topicId:int}"
@using Contilog.Models
@using Contilog.Repositories
@using System.Linq
@inject ITopicRepository TopicRepository
@inject IPostRepository PostRepository

<PageTitle>@topicTitle</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>@topicTitle</h1>
    <a href="/topics" class="btn btn-outline-secondary">
        <span class="oi oi-arrow-left" aria-hidden="true"></span>
        Back to Topics
    </a>
</div>

@if (topic == null)
{
    <div class="alert alert-warning">
        <h4>Topic Not Found</h4>
        <p>The requested topic could not be found.</p>
        <a href="/topics" class="btn btn-primary">Return to Topics</a>
    </div>
}
else
{
    <div class="topic-info mb-4">
        <div class="card">
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <strong>Category:</strong> @topic.Category
                    </div>
                    <div class="col-md-6">
                        <strong>Author:</strong> @topic.Author
                    </div>
                    <div class="col-md-6">
                        <strong>Created:</strong> @topic.CreatedDate.ToString("MMM dd, yyyy")
                    </div>
                    <div class="col-md-6">
                        <strong>Status:</strong> 
                        <StatusBadge IsActive="topic.IsActive" />
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="posts-section">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h3>Posts (@posts.Count())</h3>
        </div>

        @if (!posts.Any() && topic.IsActive)
        {
            <div class="alert alert-info">
                <h5>No posts yet</h5>
                <p>Be the first to start the conversation!</p>
            </div>
        }
        else
        {
            <div class="posts-container">
                @foreach (var post in posts.OrderBy(p => p.CreatedDate))
                {
                    <div class="card post-card mb-3">
                        <div class="card-body">
                            <div class="post-header d-flex justify-content-between align-items-start">
                                <div class="post-content">
                                    <h6 class="post-title">@post.Title</h6>
                                    <p class="post-text">@post.Content</p>
                                </div>
                                <div class="post-meta-top text-end text-muted">
                                    <div class="post-edit-button mb-2">
                                        <button class="btn btn-sm btn-outline-primary" @onclick="() => EditPost(post.Id)" title="Edit Post">
                                            <span class="oi oi-pencil" aria-hidden="true"></span>
                                        </button>
                                    </div>
                                    <div class="post-author">
                                        <strong>@post.Author</strong>
                                    </div>
                                    <div class="post-date">
                                        @post.CreatedDate.ToString("MMM dd, yyyy 'at' h:mm tt")
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        @if (topic.IsActive)
        {
            <div class="d-flex justify-content-center mt-4">
                <button class="btn btn-primary" @onclick="AddNewPost">
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    Add Post
                </button>
            </div>
        }
    </div>
}

@code {
    [Parameter] public int TopicId { get; set; }

    private Topic? topic;
    private string topicTitle = "Topic Details";
    private List<Post> posts = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTopicDataAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadTopicDataAsync();
    }

    private async Task LoadTopicDataAsync()
    {
        topic = await TopicRepository.GetTopicByIdAsync(TopicId);
        if (topic != null)
        {
            topicTitle = topic.Title;
            var topicPosts = await PostRepository.GetPostsByTopicIdAsync(TopicId);
            posts = topicPosts.ToList();
        }
        else
        {
            topicTitle = "Topic Not Found";
            posts = new List<Post>();
        }

        StateHasChanged();
    }

    private void AddNewPost()
    {
        // TODO: Implement add new post functionality
        Console.WriteLine("Add new post clicked");
    }

    private void EditPost(int postId)
    {
        // TODO: Implement edit post functionality
        Console.WriteLine($"Editing post with ID: {postId}");
    }
}
